---
- name: Include locales Configuration playbook
  ansible.builtin.import_playbook: locales.yml

- name: Include Docker Install playbook
  ansible.builtin.import_playbook: docker.yml

- name: Configure VM as a fileserver
  hosts: "{{ host }}"
  remote_user: jenkins
  become: true

  roles:
    - no_ipv6

  tasks:
    - name: Debian - Install required packages for NFS
      ansible.builtin.package:
        name: "{{ item }}"
      loop:
        - nfs-kernel-server

    - name: Linux users and groups - Create groups
      ansible.builtin.group:
        name: "{{ item.0.name }}{{ item.1.name }}"
        gid: "{{ item.0.gid + item.1.base_value }}"
      loop: "{{ users_groups | product(gid) }}"
      loop_control:
        label: "{{ item.0.name }}{{ item.1.name }}"

    - name: Linux users and groups - Create users
      ansible.builtin.user:
        name: "{{ item.name }}"
        group: "{{ users_default_group }}"
        groups: "{{ item.groups }}"
        append: true
        update_password: on_create
        shell: /sbin/nologin
        create_home: false
        uid: "{{ item.uid }}"
      loop: "{{ users_account }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Debian - Mount hard disk
      ansible.posix.mount:
        path: "{{ data_source }}"
        src: /dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_drive-scsi1-part1
        fstype: ext4
        state: mounted

    - name: Debian - Create shared folders
      ansible.builtin.file:
        path: "{{ data_source }}/{{ item.name }}"
        state: directory
        owner: nas_user
        group: users
        mode: u=rwx,g=rwx,o=rx,g+s
      loop: "{{ users_groups }}"
      loop_control:
        label: "{{ data_source }}/{{ item.name }}"

    - name: Samba - Install packages
      ansible.builtin.package:
        name: "{{ item }}"
      loop:
        - samba
        - keepalived

    - name: Samba - Stop netbios service
      ansible.builtin.service:
        name: nmbd
        state: stopped
        enabled: false

    - name: Samba - List existing users and hash
      ansible.builtin.shell: |
        pdbedit -L -w
      register: samba_users_and_hash
      changed_when: false

    - name: Samba - Create list from existing users
      ansible.builtin.set_fact:
        samba_users: "{{ samba_users_and_hash.stdout_lines | map('split', ':' ) | map(attribute=0) | list }}" 
      changed_when: false

    - name: Samba - Delete non declared users
      ansible.builtin.shell: |
        pdbedit -x {{ item }}
      loop: "{{ samba_users | difference(users_account | map(attribute='name')) }}"

    - name: Samba - Create missing users
      ansible.builtin.shell: |
        printf "\n\n" | smbpasswd -sa {{ item }}
      loop: "{{ users_account | map(attribute='name') | difference(samba_users) }}"

    - name: Samba - Create existing hashes list
      ansible.builtin.set_fact:
        samba_hashes: "{{ samba_users_and_hash.stdout_lines | map('split', ':' ) | map(attribute=3) | list }}" 

    - name: Samba - Update password hashes
      ansible.builtin.shell: pdbedit -u {{ item.name }} --set-nt-hash {{ item.passwd_hash }}
      loop: "{{ users_account }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.passwd_hash not in samba_hashes

    - name: Samba - Create configuration file
      ansible.builtin.template:
        src: smb.conf.j2
        dest: /etc/samba/smb.conf
        owner: root
        group: root
        mode: 0644
      notify:
        - Samba - Restart service

    - name: Keepalived - Create configuration file
      ansible.builtin.template:
        src: ./templates/keepalived.conf.j2
        dest: /etc/keepalived/keepalived.conf
        owner: root
        group: root
        mode: 0644
        lstrip_blocks: yes
      notify:
        - Keepalived - Restart service

    - name: Docker - Create config folders
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: nas_user
        group: users
        mode: 0775
      loop:
        - "{{ data_source }}/Informatique/Config"
        - "{{ config_source }}"
        - "{{ config_source }}/filebrowser"
        - "{{ config_source }}/syncthing_{{ inventory_hostname }}"

    - name: Docker/Filebrowser - Create db config file
      ansible.builtin.file:
        path: "{{ config_source }}/filebrowser/filebrowser.db"
        state: touch
        owner: nas_user
        group: users
        mode: 0664
        modification_time: preserve
        access_time: preserve

    - name: Docker - Create docker-compose file
      ansible.builtin.template:
        src: ./templates/docker-compose.yml.j2
        dest: "/home/jenkins/docker-compose-{{ inventory_hostname }}.yml"
        lstrip_blocks: yes
      tags: docker-compose

    - name: Docker - Build images and Deploy containers
      community.docker.docker_compose_v2:
        project_src: "/home/jenkins"
        files:
          - "/home/jenkins/docker-compose-{{ inventory_hostname }}.yml"
        build: always
        remove_orphans: true

    - name: NFS - Create storage folders
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: nas_user
        group: users
        mode: 0775
      loop:
        - "{{ data_source }}/Informatique/nfs/pve"
  
    - name: NFS - Create NFS exports
      ansible.builtin.copy:
        dest: /etc/exports
        content: |
          {{ data_source }}/Informatique/nfs/pve          192.168.0.0/24(fsid=1,rw,subtree_check,insecure,anonuid=1001,anongid=100)
      notify:
        - NFS - Restart service

  handlers:
    - name: Samba - Restart service
      ansible.builtin.service:
        name: smbd
        state: restarted
        enabled: true

    - name: Keepalived - Restart service
      ansible.builtin.service:
        name: keepalived
        state: restarted
        enabled: true

    - name: NFS - Restart service
      ansible.builtin.service:
        name: nfs-kernel-server
        state: restarted
        enabled: true
...
