---
- name: Configure VM with Bind
  hosts: "{{ host }}"
  gather_facts: no

  tasks:
    - name: Debian - Prerequisites
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - set_locale
        - docker
        - nfs_client
        - no_ipv6

    - name: Debian - Create CRM config folders
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ nfs_share_owner.name }}"
        group: "{{ nfs_share_owner.group }}"
      loop:
        - path: "{{ crm_doc_path }}"
        - path: "{{ crm_custom_path }}"

    - name: Debian - Create CRM DB folder
      ansible.builtin.file:
        path: "{{ crm_db_path }}"
        state: directory
      become: true

    - name: Docker - Check if compose file exists
      ansible.builtin.stat: 
        path: "./compose.yml"
      register: docker_compose_file

    - name: Debian - Test docker compose file changes
      ansible.builtin.template:
        src: ./templates/compose.yml.j2
        dest: "./compose.yml"
        lstrip_blocks: yes
      check_mode: true
      register: docker_compose_file_content
      when: docker_compose_file.stat.exists

    - name: Debian - Delete CRM install lock for upgrade
      ansible.builtin.file:
        path: "{{ crm_doc_path }}/install.lock"
        state: absent
      when: (docker_compose_file_content is defined and docker_compose_file_content.changed) or
            not docker_compose_file.stat.exists

    - name: Docker - Deploy Jenkins containers
      ansible.builtin.import_role:
        name: docker_compose

    - name: Debian - Check if CRM install/upgrade is finished
      ansible.builtin.file:
        path: "{{ crm_doc_path }}/install.lock"
        state: file
      retries: 30
      delay: 10

    - name: Docker - Create Dolibarr cron file
      community.docker.docker_container_copy_into:
        container: "{{ crm.service_name }}"
        container_path: "/etc/cron.d/{{ crm.service_name }}"
        mode: 0644
        content: |
          PATH=\$PATH:/usr/local/bin
          */5 * * * * root /bin/su www-data -s /bin/sh -c '/var/www/scripts/cron/cron_run_jobs.php {{ services.0.environment.DOLI_CRON_KEY }} {{ services.0.environment.DOLI_CRON_USER }}' > /proc/1/fd/1 2> /proc/1/fd/2

    - name: Docker - Check Dolibarr cron service status
      community.docker.docker_container_exec:
        container: "{{ crm.service_name }}"
        command: service cron status
      register: service_cron_status
      failed_when: false
      changed_when: false

    - name: Docker - Activate Dolibarr cron
      community.docker.docker_container_exec:
        container: "{{ crm.service_name }}"
        command: service cron start
      when: service_cron_status.rc != 0

    - name: Debian - Check Dolibarr database available backups
      ansible.builtin.find:
        paths: "{{ crm_doc_path }}/admin/backup"
        patterns: '*.sql'
      register: dolibarr_database_backups
      when:
        - restore_database is true

    - name: Docker - Restore last Dolibarr database if needed
      community.docker.docker_container_exec:
        container: "{{ crm.service_name }}"
        command: | 
          mysql dolidb -h {{ db.service_name }} -P 3306 -u {{ services.1.environment.MYSQL_USER }} -p{{ services.1.environment.MYSQL_PASSWORD }} -e 'source /var/www/documents/admin/backup/{{ (dolibarr_database_backups.files | sort(attribute='mtime') | last).path | basename }}'
      when:
        - restore_database is true
        - dolibarr_database_backups.matched != 0
...