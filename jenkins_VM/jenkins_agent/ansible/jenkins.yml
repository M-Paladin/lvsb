---
- name: Configure Debian VM with dockerized Jenkins, 1 server and 1 agent (Ansible and Opentofu)
  hosts: "{{ host }}"
  remote_user: jenkins
  become: true

  tasks:
    - name: Install Docker apt repository
      block:
        - name: Docker repository - Download gpg key
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/debian/gpg
            dest: /etc/apt/keyrings/docker.asc
            mode: 'a+r'

        - name: Docker repository - Add
          ansible.builtin.apt_repository:
            repo: >-
              deb [arch=x86_64 signed-by=/etc/apt/keyrings/docker.asc]
              https://download.docker.com/linux/debian {{ ansible_lsb.codename }} stable
            filename: docker

    - name: Debian packages - Install required
      ansible.builtin.package:
        name: "{{ item }}"
      loop:
        - docker-ce
        - python3-docker
        - cifs-utils

    # - name: Configure Docker
    #   block:
    - name: Docker - Add jenkins user to group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true

    - name: Docker - Prune resources
      community.docker.docker_prune:
        containers: true
        images: true
        images_filters:
          dangling: false
        volumes: true
        builder_cache: true

    - name: Create mount point and mount CIFS volume
      block:
        - name: CIFS - Mount needed datas for container on host
          ansible.posix.mount:
            src: "{{ data_source }}"
            path: "{{ data_mountpoint }}"
            opts: "rw,credentials=./credentials/.nas_credentials,uid=1000,gid=1000"
            state: mounted
            fstype: cifs

        - name: CIFS - Mount needed sshkeys for container on host
          ansible.posix.mount:
            src: "{{ data_source }}/sshkeys"
            path: "{{ data_mountpoint }}/sshkeys"
            opts: "rw,credentials=./credentials/.nas_credentials,uid=1000,gid=1000,file_mode=0400"
            state: mounted
            fstype: cifs

    - name: Install Jenkins server and agents
      block:
        - name: Jenkins - Create docker-compose files for server and agent
          ansible.builtin.template:
            src: ./templates/docker-compose.yml.j2
            dest: "{{ data_mountpoint }}/docker-compose-{{ host }}.yml"
            lstrip_blocks: yes
        #   dest: "{{ data_mountpoint }}/{{ item.name }}/docker-compose-{{ host }}.yml"
        #   loop: "{{ service }}"
        #   loop_control:
        #     label: "{{ item.name }}"

        - name: Jenkins - Test plugin site is reachable
          ansible.builtin.uri:
            url: https://updates.jenkins.io/update-center.json

        # - name: Jenkins - Destroy server
        #   community.docker.docker_compose_v2:
        #     project_src: "{{ data_mountpoint }}/{{ item.name }}"
        #     files:
        #       - "{{ data_mountpoint }}/{{ item.name }}/docker-compose-{{ host }}.yml"
        #     state: absent
        #   loop:
        #     - "{{ service[0] }}"

        - name: Jenkins - Build images and Deploy containers
          community.docker.docker_compose_v2:
            project_src: "{{ data_mountpoint }}"
            files:
              - "{{ data_mountpoint }}/docker-compose-{{ host }}.yml"
            # state: "{{ item.state | default('present')}}"
            build: always
            remove_orphans: true
            #recreate: always
          register: jenkins_service_build_deploy
          #loop: "{{ service }}"
          #loop_control:
          #  label: "{{ item.name }}"
        - name: Jenkins - Check build and deployment result
          debug: msg="{{ jenkins_service_build_deploy.stdout_lines }}"
          #debug: msg="{{ item.stdout_lines }}"
          #loop: "{{ jenkins_service_build_deploy.results }}"
          #loop_control:
          #  label: "{{ item.item.name }}"
          #when: item.stdout is defined

    - name: Reload Jenkins server configuration
      block:
        - name: Jenkins server - Wait until HTTP status is 200
          uri:
            url: "http://{{ ansible_host }}:8080/login"
            validate_certs: no
            status_code:
              - 200
          until: uri_output.status == 200
          retries: 12
          delay: 5
          register: uri_output
          
        - name: Jenkins server - Download jenkins-cli.jar in container
          community.docker.docker_container_exec:
            container: "{{ cicd_server.service_name }}"
            command: curl -o /tmp/jenkins-cli.jar http://{{ ansible_host }}:8080/jnlpJars/jenkins-cli.jar

        - name: Jenkins server - Reload server configuration from cli in container
          community.docker.docker_container_exec:
            container: "{{ cicd_server.service_name }}"
            command: java -jar /tmp/jenkins-cli.jar -s http://{{ ansible_host }}:8080/ -auth "admin:password" reload-jcasc-configuration
          register: jenkins_config_reload
        #- debug: msg="{{ jenkins_config_reload }}"

...
