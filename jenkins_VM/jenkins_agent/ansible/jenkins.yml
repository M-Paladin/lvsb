---
- name: Configure Debian VM with dockerized Jenkins, 1 server and 1 agent (Ansible and Opentofu)
  hosts: "{{ host }}"
  remote_user: jenkins
  become: true

  tasks:
    - name: Docker/Install - Download repository gpg key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/debian/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: 'a+r'

    - name: Docker/Install - Add apt repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc]
          https://download.docker.com/linux/debian {{ ansible_lsb.codename }} stable
        filename: docker

    - name: Debian - Install required packages
      ansible.builtin.package:
        name: "{{ item }}"
      loop:
        - docker-ce
        - python3-docker
        - cifs-utils

    - name: Docker/Install - Add jenkins user to group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true

    - name: Docker - Prune resources
      community.docker.docker_prune:
        containers: true
        images: true
        images_filters:
          dangling: false
        volumes: true
        builder_cache: true

    - name: CIFS mount - Create /home/jenkins/.cifs directory
      file: 
        path: "/home/jenkins/.cifs"
        state: directory
        mode: '0700'

    - name: CIFS mount - Copy credentials file
      ansible.builtin.copy:
        src: /run/secrets/cifs_credentials
        dest: /home/jenkins/.cifs/credentials
        owner: jenkins
        group: jenkins
        mode: '0600'

    - name: CIFS mount - Mount needed datas for container on host
      ansible.posix.mount:
        src: "{{ data_source }}"
        path: "{{ data_mountpoint }}"
        opts: "rw,credentials=/home/jenkins/.cifs/credentials,uid=1000,gid=1000"
        state: mounted
        fstype: cifs

    - name: CIFS mount - Copy ssh private keys file locally
      ansible.builtin.copy:
        src: "{{ data_mountpoint }}/sshkeys/{{ item }}"
        remote_src: true
        dest: /home/jenkins/.ssh/{{ item }}
        owner: jenkins
        group: jenkins
        mode: '0600'
      loop:
        - jenkins_agent_key
        - jenkins_server_key

    - name: Jenkins - Test plugin site is reachable
      ansible.builtin.uri:
        url: https://updates.jenkins.io/update-center.json
        status_code:
          - 200
      until: uri_output.status == 200
      retries: 12
      delay: 5
      register: uri_output
      
    - name: Docker/Jenkins - Create docker-compose files for server and agent
      ansible.builtin.template:
        src: ./templates/docker-compose.yml.j2
        dest: "{{ data_mountpoint }}/docker-compose-{{ host }}.yml"
        lstrip_blocks: yes

    - name: Docker/Jenkins - Build images and Deploy containers
      community.docker.docker_compose_v2:
        project_src: "{{ data_mountpoint }}"
        files:
          - "{{ data_mountpoint }}/docker-compose-{{ host }}.yml"
        build: always
        remove_orphans: true
      register: jenkins_service_build_deploy

    - name: Docker/Jenkins - Check build and deployment result
      debug: msg="{{ jenkins_service_build_deploy.stdout_lines }}"

    - name: Jenkins server - Wait until HTTP status is 200
      uri:
        url: "http://{{ ansible_host }}:8080/login"
        validate_certs: no
        status_code:
          - 200
      until: uri_output.status == 200
      retries: 12
      delay: 5
      register: uri_output
      
    - name: Jenkins server - Download jenkins-cli.jar in container
      community.docker.docker_container_exec:
        container: "{{ cicd_server.service_name }}"
        command: curl -o /tmp/jenkins-cli.jar http://{{ ansible_host }}:8080/jnlpJars/jenkins-cli.jar

    - name: Jenkins server - Reload server configuration from cli in container
      community.docker.docker_container_exec:
        container: "{{ cicd_server.service_name }}"
        command: java -jar /tmp/jenkins-cli.jar -s http://{{ ansible_host }}:8080/ -auth "admin:password" reload-jcasc-configuration
      register: jenkins_config_reload
...
